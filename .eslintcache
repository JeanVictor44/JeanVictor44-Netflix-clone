[{"C:\\projetos\\clone-netflix\\src\\index.js":"1","C:\\projetos\\clone-netflix\\src\\App.js":"2","C:\\projetos\\clone-netflix\\src\\GlobalStyles.js":"3","C:\\projetos\\clone-netflix\\src\\components\\Header\\index.js":"4","C:\\projetos\\clone-netflix\\src\\components\\Header\\HeaderElements.js":"5","C:\\projetos\\clone-netflix\\src\\components\\MovieList\\index.js":"6","C:\\projetos\\clone-netflix\\src\\components\\Modal\\index.js":"7","C:\\projetos\\clone-netflix\\src\\components\\Modal\\ModalElements.js":"8","C:\\projetos\\clone-netflix\\src\\components\\Loader\\index.js":"9","C:\\projetos\\clone-netflix\\src\\components\\Loader\\LoaderElements.js":"10","C:\\projetos\\clone-netflix\\src\\components\\MainSerie\\index.js":"11","C:\\projetos\\clone-netflix\\src\\components\\MainSerie\\MainSerieElements.js":"12","C:\\projetos\\clone-netflix\\src\\components\\MovieList\\MovieListElements.js":"13","C:\\projetos\\clone-netflix\\src\\api\\Tmdb\\request.js":"14","C:\\projetos\\clone-netflix\\src\\api\\Youtube\\index.js":"15","C:\\projetos\\clone-netflix\\src\\api\\Youtube\\request.js":"16","C:\\projetos\\clone-netflix\\src\\api\\Tmdb\\index.js":"17"},{"size":151,"mtime":1609805885207,"results":"18","hashOfConfig":"19"},{"size":1760,"mtime":1610472423394,"results":"20","hashOfConfig":"19"},{"size":421,"mtime":1610390645486,"results":"21","hashOfConfig":"19"},{"size":1235,"mtime":1610892738550,"results":"22","hashOfConfig":"19"},{"size":1101,"mtime":1610892332726,"results":"23","hashOfConfig":"19"},{"size":1576,"mtime":1610931929400,"results":"24","hashOfConfig":"19"},{"size":847,"mtime":1610413327134,"results":"25","hashOfConfig":"19"},{"size":480,"mtime":1610217857513,"results":"26","hashOfConfig":"19"},{"size":200,"mtime":1610215852733,"results":"27","hashOfConfig":"19"},{"size":551,"mtime":1610196308503,"results":"28","hashOfConfig":"19"},{"size":1240,"mtime":1610389418109,"results":"29","hashOfConfig":"19"},{"size":1569,"mtime":1610844221756,"results":"30","hashOfConfig":"19"},{"size":1238,"mtime":1610931504029,"results":"31","hashOfConfig":"19"},{"size":106,"mtime":1610462973421,"results":"32","hashOfConfig":"19"},{"size":397,"mtime":1610472142573,"results":"33","hashOfConfig":"19"},{"size":122,"mtime":1610463709832,"results":"34","hashOfConfig":"19"},{"size":1345,"mtime":1610465552718,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"ng7aca",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},"C:\\projetos\\clone-netflix\\src\\index.js",[],["75","76"],"C:\\projetos\\clone-netflix\\src\\App.js",[],"C:\\projetos\\clone-netflix\\src\\GlobalStyles.js",[],"C:\\projetos\\clone-netflix\\src\\components\\Header\\index.js",["77","78","79","80"],"C:\\projetos\\clone-netflix\\src\\components\\Header\\HeaderElements.js",[],"C:\\projetos\\clone-netflix\\src\\components\\MovieList\\index.js",[],"C:\\projetos\\clone-netflix\\src\\components\\Modal\\index.js",["81"],"import {useEffect} from 'react'\r\nimport {ContainerModal, CloseModal} from './ModalElements'\r\n\r\nconst Modal = ({isOpen, closeModal, videoKey}) => {\r\n    useEffect(() => {\r\n        window.addEventListener('click',(e) => {\r\n            const target = e.target\r\n            const modal = document.querySelector('#root > div')\r\n            if(target === modal) {\r\n                closeModal()\r\n            }\r\n        })\r\n    })\r\n    return (\r\n        <ContainerModal showModal={isOpen}>\r\n            <iframe width=\"853\" height=\"480\" src={`https://www.youtube.com/embed/${videoKey}`} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n            <CloseModal onClick={closeModal} >&times;</CloseModal>\r\n        </ContainerModal>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","C:\\projetos\\clone-netflix\\src\\components\\Modal\\ModalElements.js",[],"C:\\projetos\\clone-netflix\\src\\components\\Loader\\index.js",[],"C:\\projetos\\clone-netflix\\src\\components\\Loader\\LoaderElements.js",[],"C:\\projetos\\clone-netflix\\src\\components\\MainSerie\\index.js",["82"],"import playButton from '../../assets/playButton.svg' \r\nimport {Container, DetailsContainer, InfoContainer, ContainerButtons, Overview} from './MainSerieElements'\r\n\r\nconst PrincipalSerie = ({detailsSerie, openModal}) => {\r\n\r\n    \r\n    return (\r\n        <Container background={`https://image.tmdb.org/t/p/original/${detailsSerie.backdrop_path}`}>   \r\n            <DetailsContainer>\r\n                <h1>{detailsSerie.name}</h1>\r\n\r\n                <InfoContainer>\r\n                    <p>{detailsSerie.vote_average} Votos</p>\r\n                    <p>{new Date(detailsSerie.first_air_date).getFullYear()}</p>\r\n                    <p>{detailsSerie.number_of_seasons} Temporada{detailsSerie.number_of_seasons > 1 &&'s'}</p>\r\n                </InfoContainer>\r\n                <Overview>{detailsSerie.overview}</Overview>\r\n                <ContainerButtons>\r\n\r\n                    <button onClick={openModal}><img src={playButton} />Assistir trailer</button>\r\n                    <button >+ Minha lista</button>\r\n                </ContainerButtons>\r\n                <p><strong>Gêneros</strong>: {detailsSerie.genres.map(genre => genre.name + ' ')}</p>\r\n            </DetailsContainer>\r\n        </Container>\r\n    )\r\n}\r\nexport default PrincipalSerie","C:\\projetos\\clone-netflix\\src\\components\\MainSerie\\MainSerieElements.js",[],"C:\\projetos\\clone-netflix\\src\\components\\MovieList\\MovieListElements.js",[],"C:\\projetos\\clone-netflix\\src\\api\\Tmdb\\request.js",[],"C:\\projetos\\clone-netflix\\src\\api\\Youtube\\index.js",["83"],"import Api from './request'\r\n\r\nconst {REACT_APP_YOUTUBE_API_KEY:API_KEY} = process.env\r\n\r\n\r\nconst getTrailer = async(movieName) => {\r\n    const response = (await Api.get(`?part=snippet&channelId=UCWOA1ZGywLbqmigxE4Qlvuw&maxResults=25&q=${movieName} trailer oficial&key=${API_KEY}`)).data\r\n    console.log(response)\r\n    return response.items[0].id.videoId\r\n}\r\n\r\nexport default {\r\n    getTrailer\r\n}","C:\\projetos\\clone-netflix\\src\\api\\Youtube\\request.js",[],"C:\\projetos\\clone-netflix\\src\\api\\Tmdb\\index.js",["84"],"//Centro dos métodos de requisição \r\nimport Api from './request'\r\n\r\nconst {REACT_APP_TMDB_API_KEY:API_KEY} = process.env \r\n\r\nexport default {\r\n    getHomeMovies: async() => {\r\n        return [\r\n            {\r\n                slug:'Netflix',\r\n                title:'Originais Netflix',\r\n                movies:(await Api.get(`/discover/tv?api_key=${API_KEY}&with_networks=213&language=pt-BR`)).data.results\r\n            },\r\n            \r\n            {\r\n                title:'Populares',\r\n                movies:(await Api.get(`/movie/popular?api_key=${API_KEY}&language=pt-BR`)).data.results\r\n            },\r\n            \r\n            {\r\n                title:'Séries em alta',\r\n                movies:(await Api.get(`/tv/popular?api_key=${API_KEY}&language=pt-BR`)).data.results\r\n            } /* ,\r\n\r\n            {\r\n                title:'',\r\n                movies:().data.results\r\n            },\r\n           \r\n            {\r\n                title:'',\r\n                movies:().data.results\r\n            },\r\n           \r\n            {\r\n                title:'',\r\n                movies:().data.results\r\n            } */\r\n           \r\n        ]\r\n    },\r\n    getDetailsSerie: async(serieId) => {\r\n        const detailsSerie = (await Api.get(`/tv/${serieId}?api_key=${API_KEY}&language=pt-BR`)).data\r\n        return detailsSerie\r\n    }\r\n\r\n}",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":28,"column":25,"nodeType":"91","endLine":28,"endColumn":38},{"ruleId":"89","severity":1,"message":"90","line":29,"column":25,"nodeType":"91","endLine":29,"endColumn":38},{"ruleId":"89","severity":1,"message":"90","line":30,"column":25,"nodeType":"91","endLine":30,"endColumn":38},{"ruleId":"89","severity":1,"message":"90","line":31,"column":25,"nodeType":"91","endLine":31,"endColumn":38},{"ruleId":"92","severity":1,"message":"93","line":16,"column":13,"nodeType":"91","endLine":16,"endColumn":225},{"ruleId":"94","severity":1,"message":"95","line":20,"column":49,"nodeType":"91","endLine":20,"endColumn":73},{"ruleId":"96","severity":1,"message":"97","line":12,"column":1,"nodeType":"98","endLine":14,"endColumn":2},{"ruleId":"96","severity":1,"message":"97","line":6,"column":1,"nodeType":"98","endLine":47,"endColumn":2},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]